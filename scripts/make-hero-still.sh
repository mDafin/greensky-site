#!/usr/bin/env bash
set -euo pipefail

# ===== Config =====
INPUT_VIDEO="${1:-public/videos/hero.webm}"   # input video
TIMESTAMP="${2:-00:01:03}"                     # HH:MM:SS
BASENAME="${3:-hero-still-103}"                # output base filename
OUT_DIR="public/videos/stills"                 # plural "videos"
EXPORT_FILE="components/media/generatedStills.ts"  # TS export file

# ===== Prep =====
mkdir -p "$OUT_DIR"
mkdir -p "$(dirname "$EXPORT_FILE")"

echo "Input video : $INPUT_VIDEO"
echo "Timestamp   : $TIMESTAMP"
echo "Output dir  : $OUT_DIR"
echo "Basename    : $BASENAME"
echo

# ===== Extract stills (1200px wide) =====
# PNG
ffmpeg -y -ss "$TIMESTAMP" -i "$INPUT_VIDEO" \
  -frames:v 1 -vf "scale=1200:-1" \
  "$OUT_DIR/${BASENAME}.png"

# JPG
ffmpeg -y -ss "$TIMESTAMP" -i "$INPUT_VIDEO" \
  -frames:v 1 -vf "scale=1200:-1" -q:v 2 \
  "$OUT_DIR/${BASENAME}.jpg"

echo "Generated:"
echo " - $OUT_DIR/${BASENAME}.png"
echo " - $OUT_DIR/${BASENAME}.jpg"
echo

# ===== Optional optimization =====
if command -v pngquant >/dev/null 2>&1; then
  echo "Optimizing PNG with pngquant…"
  pngquant --quality=70-95 --ext .png --force "$OUT_DIR/${BASENAME}.png" || true
else
  echo "pngquant not found — skipping PNG optimization."
fi

if command -v jpegoptim >/dev/null 2>&1; then
  echo "Optimizing JPG with jpegoptim…"
  jpegoptim --max=85 --strip-all "$OUT_DIR/${BASENAME}.jpg" || true
else
  echo "jpegoptim not found — skipping JPG optimization."
fi

# ===== Write TypeScript export =====
VAR_NAME=$(echo "$BASENAME" | sed -E 's/[^a-zA-Z0-9]+/ /g' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2)}}1' | sed -E 's/ //g')
VAR_NAME=$(echo "${VAR_NAME:0:1}" | tr '[:upper:]' '[:lower:]')${VAR_NAME:1}

cat > "$EXPORT_FILE" <<EOL
// Auto-generated by make-hero-still.sh
// Do not edit manually.

export const ${VAR_NAME}Png = "/videos/stills/${BASENAME}.png";
export const ${VAR_NAME}Jpg = "/videos/stills/${BASENAME}.jpg";
EOL

echo
echo "Generated TS exports in $EXPORT_FILE:"
cat "$EXPORT_FILE"

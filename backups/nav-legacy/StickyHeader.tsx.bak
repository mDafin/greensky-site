// components/nav/StickyHeader.tsx
"use client";

import Link from "next/link";
import { useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import ThemeToggle from "./ThemeToggle";
import MobileMenu from "./MobileMenu";
import { NAV, type NavItem } from "./nav-data";
import NavDropdown from "./NavDropdown";
// import Brand from "./Brand"; // if you have a logo component

export default function StickyHeader() {
  const [scrolled, setScrolled] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false);
  const pathname = usePathname();

  useEffect(() => {
    const onScroll = () => setScrolled(window.scrollY > 8);
    onScroll();
    window.addEventListener("scroll", onScroll, { passive: true });
    return () => window.removeEventListener("scroll", onScroll);
  }, []);

  const heightCls = scrolled ? "h-12" : "h-14";

  return (
    <header
      className={[
        "sticky top-0 z-50 w-full border-b transition-all duration-200 ease-out",
        scrolled
          ? "backdrop-blur supports-[backdrop-filter]:bg-[color:color-mix(in_oklab,var(--bg)_68%,transparent)] border-[color:var(--hairline-dark)] shadow-[0_6px_20px_rgba(0,0,0,0.35)]"
          : "bg-[color:var(--bg)] border-transparent",
      ].join(" ")}
      role="banner"
    >
      <div className={`mx-auto max-w-screen-2xl px-4 sm:px-6 lg:px-12 ${heightCls}`}>
        <div className="flex h-full items-center justify-between gap-3">
          {/* Brand — keep YOUR logo */}
          <Link
            href="/"
            className="text-[0.95rem] font-semibold tracking-[-0.01em] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[var(--accent)] rounded"
            aria-label="Home"
          >
            Green&nbsp;Sky
          </Link>
          {/* Or: <Brand /> */}

          {/* Desktop nav (with megapanel) */}
          <nav className="hidden md:flex items-center gap-6" aria-label="Primary">
            {NAV.map((item: NavItem) => {
              if (item.type === "menu") {
                return <NavDropdown key={item.label} menu={item} />;
              }
              const active = pathname === item.href;
              return (
                <Link
                  key={item.href}
                  href={item.href}
                  className={active ? "text-text" : "text-muted hover:text-text"}
                  aria-current={active ? "page" : undefined}
                >
                  {item.label}
                </Link>
              );
            })}
          </nav>

          {/* Right controls */}
          <div className="flex items-center gap-2">
            <Link className="hidden sm:block text-muted hover:text-text transition-colors" href="/login">
              Sign in
            </Link>
            <Link
              href="/request-access"
              className="hidden sm:inline-flex h-9 items-center rounded-xl bg-accent px-3.5 text-[0.92rem] font-medium text-[var(--on-dark)] transition-colors hover:bg-[var(--accent-hover)]"
            >
              Request access
            </Link>
            <ThemeToggle />
            <button
              type="button"
              onClick={() => setMenuOpen(true)}
              className="md:hidden inline-flex h-9 w-9 items-center justify-center rounded-lg text-text/90 hover:bg-[color:color-mix(in_oklab,var(--text)_8%,transparent)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[var(--accent)]"
              aria-label="Open menu"
            >
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                <path d="M4 7h16M4 12h16M4 17h16" stroke="currentColor" strokeWidth="1.8" strokeLinecap="round" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* Mobile slide-over — flatten NAV into simple links */}
      <MobileMenu
        open={menuOpen}
        onClose={() => setMenuOpen(false)}
        items={
          NAV.flatMap((it) =>
            it.type === "menu"
              ? it.sections.flatMap((s) => s.items.map(({ href, label }) => ({ href, label })))
              : [{ href: it.href, label: it.label }]
          )
        }
        pathname={pathname}
      />
    </header>
  );
}
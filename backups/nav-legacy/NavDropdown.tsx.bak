// components/nav/NavDropdown.tsx
"use client";

import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import type { NavMenu } from "./nav-data";

export default function NavDropdown({ menu }: { menu: NavMenu }) {
  const [open, setOpen] = useState(false);
  const hoverTimer = useRef<number | null>(null);

  // Close on ESC
  useEffect(() => {
    if (!open) return;
    const onKey = (e: KeyboardEvent) => e.key === "Escape" && setOpen(false);
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [open]);

  const openNow = () => {
    if (hoverTimer.current) window.clearTimeout(hoverTimer.current);
    setOpen(true);
  };
  const closeSoon = () => {
    if (hoverTimer.current) window.clearTimeout(hoverTimer.current);
    hoverTimer.current = window.setTimeout(() => setOpen(false), 100);
  };

  return (
    <div className="relative" onMouseEnter={openNow} onMouseLeave={closeSoon}>
      {/* trigger */}
      <button
        type="button"
        className={["px-2 py-1 rounded-lg transition-colors", open ? "text-text" : "text-muted hover:text-text"].join(" ")}
        aria-haspopup="true"
        aria-expanded={open}
        onClick={() => setOpen((v) => !v)}
      >
        {menu.label}
      </button>

      {/* panel */}
      <div
        className={[
          "absolute left-1/2 -translate-x-1/2 top-full mt-3 w-[min(92vw,900px)]",
          "rounded-2xl border border-[color:var(--hairline-dark)]",
          "bg-[color:var(--bg)] shadow-[0_24px_60px_rgba(0,0,0,.55)]",
          "transition-opacity duration-150 ease-out",
          open ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none",
        ].join(" ")}
        role="menu"
        onMouseEnter={openNow}
        onMouseLeave={closeSoon}
      >
        <div className="grid gap-6 p-6 sm:grid-cols-2 md:grid-cols-3">
          {menu.sections.map((sec, i) => (
            <div key={i} className="min-w-0">
              {sec.title && (
                <div className="mb-2 text-xs uppercase tracking-[0.14em] text-muted">{sec.title}</div>
              )}
              <ul className="space-y-1.5">
                {sec.items.map((it) => (
                  <li key={it.href}>
                    <Link
                      href={it.href}
                      className="block rounded-xl px-3 py-2 transition-colors hover:bg-[color:color-mix(in_oklab,var(--text)_6%,transparent)]"
                    >
                      <div className="text-[0.95rem] font-medium tracking-[-0.01em]">{it.label}</div>
                      {it.desc && <div className="text-sm text-muted line-clamp-2">{it.desc}</div>}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}